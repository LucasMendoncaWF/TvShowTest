{"version":3,"sources":["icons/add-gray-s.svg","icons/sad-gray-w.svg","icons/rec-gray-s.svg","icons/share-gray-s.svg","icons/logo-telecine.svg","icons/play-small-player-w.svg","components/show-title.js","components/show-general.js","components/show-cast.js","components/show-data.js","components/season-tab.js","components/episode.js","components/season-select.js","components/tvshow-app.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ShowTitle","getTilteInfo","genres","_this","props","showInfo","Genres","showYear","Year","titleGenres","undefined","genre","length","Title","react_default","a","createElement","className","this","Component","General","alt","src","AddToList","Evaluate","Record","Share","showSynopsis","Cast","cast","map","castmember","key","ID","Name","ShowData","state","tabGeneralClass","tabCastClass","changeTab","tab","generalTab","castTab","setState","_this2","onClick","Telecine","components_show_general","Synopsis","components_show_cast","SeasonTab","changeClass","changeSeason","seasonNumber","classTab","titleTab","Episode","changeEp","number","title","Play","open","image","synopsis","SeasonsSelect","seasonSelected","epSelected","nSeason","checkQuantityOfSeasons","epsInfo","seasons","forEach","ep","push","SeasonNumber","Math","max","apply","showOrHideEPInfo","nEp","seasonsQuantity","seasonsTabs","season","components_season_tab","EpisodeNumber","components_episode","Image","loadAPIInfo","callback","data","xobj","XMLHttpRequest","overrideMimeType","onreadystatechange","readyState","status","responseText","send","TvShowApp","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","showData","EpsData","Background","getShowInfo","response","dados","JSON","parse","Images","components_show_title","components_season_select","components_show_data","Boolean","window","location","hostname","match","ReactDOM","render","components_tvshow_app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5e14b2c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/add-gray-s.6a555c88.svg\";","module.exports = __webpack_public_path__ + \"static/media/sad-gray-w.1aa6adbb.svg\";","module.exports = __webpack_public_path__ + \"static/media/rec-gray-s.b2f18160.svg\";","module.exports = __webpack_public_path__ + \"static/media/share-gray-s.2e9ef69e.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-telecine.238fd604.svg\";","module.exports = __webpack_public_path__ + \"static/media/play-small-player-w.4ee3f796.svg\";","import React, { Component } from 'react';\r\nimport '../styles/show-title.scss';\r\n\r\nclass ShowTitle extends Component {\r\n\r\n  //define the data to the correct format\r\n  getTilteInfo = () =>{\r\n   const genres = this.props.showInfo.Genres;\r\n   const showYear = this.props.showInfo.Year;\r\n   var titleGenres = '';\r\n   if(genres !== undefined){\r\n        for(var genre = 0; genre < genres.length; genre++){\r\n            titleGenres += genres[genre].Title + \" / \";\r\n        }\r\n        return  titleGenres + showYear;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    <div className=\"title-area\">\r\n        <div className=\"title\">{this.props.showInfo.Title}</div>\r\n        <div className=\"title-info\">{this.getTilteInfo()}</div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShowTitle;\r\n","import React, { Component } from 'react';\r\nimport '../styles/show-general.scss';\r\nimport AddToList from '../icons/add-gray-s.svg';\r\nimport Evaluate from '../icons/sad-gray-w.svg';\r\nimport Record from '../icons/rec-gray-s.svg';\r\nimport Share from '../icons/share-gray-s.svg';\r\n\r\nclass General extends Component {\r\n\r\n  render() {\r\n    return (\r\n    <div className=\"container-general\">\r\n        <div className=\"icons\">\r\n            <div className=\"icon\">\r\n                <div className=\"icon-image\"><img alt=\"button icon\" src={AddToList}/></div>\r\n                <div className=\"icon-text\">Add to List</div>\r\n            </div>\r\n            <div className=\"icon\">\r\n                <div className=\"icon-image\"><img alt=\"button icon\" src={Evaluate}/></div>\r\n                <div className=\"icon-text\">Rate</div>\r\n            </div>\r\n            <div className=\"icon\">\r\n                <div className=\"icon-image\"><img alt=\"button icon\" src={Record}/></div>\r\n                <div className=\"icon-text\">Record</div>\r\n            </div>\r\n            <div className=\"icon\">\r\n                <div className=\"icon-image\"><img alt=\"button icon\" src={Share}/></div>\r\n                <div className=\"icon-text\">Share</div>\r\n            </div>\r\n        </div>\r\n        <div className=\"synopsis\">\r\n            <div className=\"synopsis-text\">\r\n            <span className=\"synopsis-title\">SYNOPSIS</span>\r\n            <br />\r\n            {this.props.showSynopsis}\r\n            </div>\r\n        </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default General;\r\n","import React, { Component } from 'react';\r\nimport '../styles/show-cast.scss';\r\n\r\nclass Cast extends Component {\r\n\r\n  render() {\r\n    return (\r\n    <div className=\"container-cast\">\r\n        <div className=\"cast\">\r\n            {//show the cast members on the cast tab\r\n              this.props.cast.map(castmember => {\r\n                        return <div className=\"cast-member\" key={castmember.ID}><div className=\"member-name\">{castmember.Name}</div></div>\r\n            })}\r\n        </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cast;\r\n","import React, { Component } from 'react';\r\nimport General from './show-general';\r\nimport Cast from './show-cast';\r\nimport '../styles/show-data.scss';\r\nimport Telecine from '../icons/logo-telecine.svg';\r\n\r\nclass ShowData extends Component {\r\n\r\n  state = {\r\n    tabGeneralClass: \"tab-selected\",\r\n    tabCastClass: \"tab\"\r\n  }\r\n\r\n  //change tab between General and Cast \r\n  changeTab = (tab) =>{\r\n    var generalTab = \"tab\";\r\n    var castTab = \"tab\";\r\n    if(tab === \"general\"){\r\n        generalTab = \"tab-selected\";\r\n    }else if(tab === \"cast\"){\r\n        castTab = \"tab-selected\";\r\n    }\r\n    this.setState({tabGeneralClass: generalTab, tabCastClass: castTab});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    <div className=\"data-area\">\r\n      <div className=\"tabs\">\r\n        <div className={this.state.tabGeneralClass} onClick={()=>{this.changeTab(\"general\")}}>GENERAL</div>\r\n        <div className={this.state.tabCastClass} onClick={()=>{this.changeTab(\"cast\")}}>CAST</div>\r\n      </div>\r\n      <img className=\"telecine-img\" alt=\"telecine-img\" src={Telecine}/>\r\n      <div className=\"divider\"></div>\r\n      <div className=\"tab-content\">\r\n        {//shows the info of the tab selected\r\n          (() =>{if(this.state.tabGeneralClass === \"tab-selected\"){\r\n            return <General showSynopsis={this.props.showInfo.Synopsis}/>\r\n          }else{\r\n            return <Cast cast={this.props.showInfo.Cast} />\r\n          }\r\n        })()}\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShowData;\r\n","import React, { Component } from 'react';\r\nimport '../styles/season-tab.scss';\r\n\r\nclass SeasonTab extends Component {\r\n//change the season selected on component SeasonSelect\r\nchangeClass = () =>{\r\nthis.props.changeSeason(this.props.seasonNumber);\r\n}\r\n\r\n  render() {\r\n    return ( \r\n    <div onClick={this.changeClass} className={this.props.classTab}>\r\n        {this.props.titleTab}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SeasonTab;\r\n","import React, { Component } from 'react';\r\nimport '../styles/episode.scss';\r\nimport Play from '../icons/play-small-player-w.svg'\r\n\r\nclass Episode extends Component {\r\n\r\n  render() {\r\n    return ( \r\n    <div onClick={()=>{this.props.changeEp(this.props.number)}} className=\"episode-container\">\r\n        <div className=\"episode-title\">{this.props.number} {this.props.title}\r\n            <img className=\"play-button\" alt=\"play button\" src={Play}/>\r\n        </div>\r\n        {//clincking on the episode, the function \"changeEP above, will show or hide the episode synopsis and imagee\"    \r\n        (() =>{\r\n            if(this.props.open){\r\n                return (\r\n                    <div className=\"ep-data\">\r\n                        <img className=\"ep-thumbnail\" alt=\"thumbnail\" src={this.props.image}/>\r\n                        <div className=\"ep-synopsis\">{this.props.synopsis}</div>\r\n                    </div>\r\n                )\r\n            }\r\n        })()}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Episode;\r\n","import React, { Component } from 'react';\r\nimport '../styles/season-select.scss';\r\nimport SeasonTab from './season-tab';\r\nimport Episode from './episode';\r\n\r\nclass SeasonsSelect extends Component {\r\n\r\nstate = {\r\n    seasonSelected: 1,\r\n    epSelected: 0\r\n}\r\n\r\n//change to the selected season\r\nchangeSeason = (nSeason) =>{\r\n    this.setState({seasonSelected: nSeason});   \r\n    this.setState({epSelected: 0});  \r\n}\r\n\r\n//check how many seasons the show has\r\ncheckQuantityOfSeasons = (epsInfo) =>{\r\n    var seasons = [];\r\n    epsInfo.forEach(function (ep) {\r\n        if(ep){\r\n            seasons.push(ep.SeasonNumber);\r\n        }\r\n        });\r\n    return Math.max(...seasons); \r\n}\r\n\r\n//function called by the Episode component to change the selected episode\r\nshowOrHideEPInfo = (nEp) =>{\r\n    if(nEp === this.state.epSelected){\r\n        this.setState({epSelected: 0});   \r\n    }else{\r\n        this.setState({epSelected: nEp});   \r\n    } \r\n}\r\n\r\nrender() {\r\n    return (\r\n        <div className=\"container-seasons\">\r\n            <div className=\"season-tabs\">           \r\n                {(() =>{                \r\n                    var seasonsQuantity = this.checkQuantityOfSeasons(this.props.epsInfo);\r\n                    if(seasonsQuantity > 0){\r\n                        var seasonsTabs = [];\r\n                        for(var season = 1; season <= seasonsQuantity; season++){\r\n                            var classTab = \"season-tab\";\r\n                            if(season === this.state.seasonSelected){\r\n                                classTab = \"season-tab-selected\";\r\n                            }\r\n                            seasonsTabs.push(<SeasonTab key={season} classTab={classTab} seasonNumber={season} changeSeason={this.changeSeason} titleTab={\"T\" + season} />)\r\n                        }\r\n                        return seasonsTabs;\r\n                    }\r\n                })()}\r\n            </div>\r\n            <div className=\"divider\"></div>\r\n            <div className=\"episodes\">\r\n                {this.props.epsInfo.map(ep => {\r\n                    if(ep){\r\n                        if(ep.SeasonNumber === this.state.seasonSelected){\r\n                            var open = false;\r\n                            if(this.state.epSelected === ep.EpisodeNumber){\r\n                                open = true;\r\n                            }\r\n                            return <Episode key={ep.ID} open={open} title={ep.Title} changeEp={this.showOrHideEPInfo} synopsis={ep.Synopsis} number={ep.EpisodeNumber} image={ep.Image}/>\r\n                        }\r\n                    }\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SeasonsSelect;\r\n","import React, { Component } from 'react';\nimport '../styles/tvshow-app.scss';\nimport ShowTitle from './show-title';\nimport ShowData from './show-data';\nimport SeasonsSelect from './season-select';\n\n//generic function to get API info\nvar loadAPIInfo = (callback, data) => {   \n  var xobj = new XMLHttpRequest();\n      xobj.overrideMimeType(\"application/json\");\n  xobj.open('GET', data, true);\n  xobj.onreadystatechange = () =>{\n    if(xobj.readyState === 4 && xobj.status === 200){\n          callback(xobj.responseText);\n    }\n  };\n  xobj.send(null);  \n}\n\nclass TvShowApp extends Component {\n\n  state = {\n    showData: [],\n    EpsData: [],\n    Background: ''\n  }\n\n  //gets info from the API's from the urls\n  getShowInfo = () =>{\n    loadAPIInfo((response) => {\n      var dados = JSON.parse(response);\n      this.setState({showData: dados, Background: dados.Images.Background});\n     }, \"https://sample-api-78c77.firebaseio.com/tv-shows/SHOW123.json\");\n\n     loadAPIInfo((response) => {\n      var dados = JSON.parse(response);\n      this.setState({EpsData: dados});\n   }, \"https://sample-api-78c77.firebaseio.com/episodes/SHOW123.json\");\n  }\n\n  constructor(props) {\n    super(props);\n    this.getShowInfo();\n  }\n\n  render() {\n    return (\n      <div className='page-container'>\n        <div className=\"background\">        \n          <img className=\"background-image\" alt='background' src={this.state.Background}/>\n          <div className=\"image-shadow\"></div>\n        </div>  \n        <ShowTitle showInfo={this.state.showData} /> \n        <SeasonsSelect epsInfo={this.state.EpsData} />     \n        <ShowData showInfo={this.state.showData} />\n        <div className=\"close-page-icon\">X</div>\n      </div>\n    );\n  }\n}\n\nexport default TvShowApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TvShowApp from './components/tvshow-app.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TvShowApp />, document.getElementById('tvshow-app'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}